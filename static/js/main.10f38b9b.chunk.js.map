{"version":3,"sources":["UseForm.js","validateInfo.js","FormSignup.js","FormSuccess.js","Form.js","App.js","index.js"],"names":["useForm","callback","validate","useState","username","email","password","password2","values","setValues","errors","setErrors","isSubmit","setSubmit","useEffect","Object","keys","length","handleChange","e","target","name","value","handleSubmit","preventDefault","validateInfo","FormSignup","submitForm","className","onSubmit","htmlFor","classname","id","type","placeholder","onChange","FormSuccess","src","alt","Form","isSubmitted","setIsSubmitted","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10f38b9b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n// Passing validate and callback as a parameter so it is defined\r\nconst useForm = (callback, validate) => {\r\n    // destructuring state values and setting initial state value\r\n    const [values, setValues] = useState({\r\n        username:'',\r\n        email:'',\r\n        password:'',\r\n        password2:''\r\n    })\r\n\r\n    // states\r\n    const [errors, setErrors] = useState({})\r\n    const [isSubmit, setSubmit] = useState(false);\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            // spreading out ALL the values from the form inputs\r\n            ...values,\r\n            // this is targetting the name values for our inputs \r\n            // and changing that specific one\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        // this prevents the page from refreshing. We want it to re-render\r\n        e.preventDefault();\r\n\r\n        // this will show error messages on page when clicking submit button\r\n        setErrors(validate(values));\r\n        // change submit to true when clicking submit button\r\n        setSubmit(true);\r\n    }\r\n\r\n    // logic to prevent success page without filling out form\r\n    useEffect(\r\n        () => {\r\n            if(Object.keys(errors).length === 0 && isSubmit) {\r\n                callback();\r\n            }\r\n        },\r\n        // this will only let the page to update when there are errors\r\n        [errors]\r\n    );\r\n\r\n    // this will allow us to export it to other components\r\n    // methods: handleChange, handleSubmit\r\n    // const: values, errors\r\n    return { handleChange, values, handleSubmit, errors };\r\n};\r\n\r\nexport default useForm;","// Passing values into errors logic function\r\nexport default function validateInfo(values) {\r\n    let errors = {}\r\n\r\n    if(!values.username) {\r\n        errors.username = \"Username required\"\r\n    } else if(values.username.length < 5) {\r\n        errors.username = \"Username must be greater than 5 characters long\"\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = \"Email required\"\r\n    } else if(values.email.length < 5) {\r\n        errors.email = \"Email must be greater than 5 characters long\"\r\n    }\r\n\r\n    if(!values.password) {\r\n        errors.password = \"Password required\"\r\n    } \r\n    else if(values.password.length < 8) {\r\n        errors.password = \"Password must 8 characters long\"\r\n    }\r\n\r\n    if(!values.password2) {\r\n        errors.password2 = \"Password required\"\r\n    }\r\n    else if (values.password2 !== values.password ) {\r\n        errors.password2 = \"Passwords do not match\"\r\n    }\r\n\r\n    return errors;\r\n}","import React from 'react'\r\nimport useForm from \"./UseForm\"\r\nimport validateInfo from \"./validateInfo\"\r\nimport \"./form.css\"\r\n\r\n// passing in submit function into parameter\r\nconst FormSignup = ({ submitForm }) => {\r\n    // destructuring values from useForm component\r\n    // methods: handleChange, handleSubmit\r\n    // const: values, errors\r\n    // validateInfo sets up the value of useForm\r\n    const { handleChange, values, handleSubmit, errors } = useForm(submitForm, validateInfo);\r\n\r\n    return (\r\n        <div className=\"form-content-right\">\r\n            <form \r\n                className=\"form\"\r\n                onSubmit={ handleSubmit }\r\n            >\r\n                <h1>Get started with us today! Create your account by filling out the\r\n                    information below.\r\n                </h1>\r\n                <div className=\"form-inputs\">\r\n                    <label \r\n                        htmlFor=\"username\"\r\n                        classname=\"form-label\">\r\n                        Username:\r\n                    </label>\r\n                    <input\r\n                        id=\"username\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        className=\"form-input\" \r\n                        placeholder=\"Enter your username\"\r\n                        value={ values.username }\r\n                        onChange={ handleChange }\r\n                    />\r\n                    {/* If errors is true/exists then pass in the following p tag */}\r\n                    { errors.username && <p>{ errors.username }</p> }\r\n                </div>\r\n                <div className=\"form-inputs\">\r\n                    <label \r\n                        htmlFor=\"email\"\r\n                        classname=\"form-label\">\r\n                        Email:\r\n                    </label>\r\n                    <input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-input\" \r\n                        placeholder=\"Enter your email\"\r\n                        value={ values.email }\r\n                        onChange={ handleChange }\r\n                    />\r\n                    { errors.email && <p>{ errors.email }</p> }\r\n                </div>\r\n                <div className=\"form-inputs\">\r\n                    <label \r\n                        htmlFor=\"password\"\r\n                        classname=\"form-label\">\r\n                        Password:\r\n                    </label>\r\n                    <input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        className=\"form-input\" \r\n                        placeholder=\"Enter your password\"\r\n                        value={ values.password }\r\n                        onChange={ handleChange }\r\n                    />\r\n                    { errors.password && <p>{ errors.password }</p> }\r\n                </div>\r\n                <div className=\"form-inputs\">\r\n                    <label \r\n                        htmlFor=\"password2\"\r\n                        classname=\"form-label\">\r\n                        Password Confirmation:\r\n                    </label>\r\n                    <input\r\n                        id=\"password2\"\r\n                        type=\"password\"\r\n                        name=\"password2\"\r\n                        className=\"form-input\" \r\n                        placeholder=\"Enter your password\"\r\n                        value={ values.password2 }\r\n                        onChange={ handleChange }\r\n                    />\r\n                    { errors.password2 && <p>{ errors.password2 }</p> }\r\n                </div>\r\n                <button className=\"form-input-btn\" \r\n                    type=\"submit\">\r\n                    Sign up\r\n                </button>\r\n                <span className=\"form-input-login\">\r\n                    Already have an account? Login\r\n                </span>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormSignup\r\n","import React from 'react'\r\nimport './form.css';\r\n\r\nconst FormSuccess = () => {\r\n    return (\r\n        <div className=\"form-content-right\">\r\n            <h1 className=\"form-success\">\r\n                We have recieved your request!\r\n            </h1>\r\n            <img src=\"img/img-3.svg\" alt=\"success\" className=\"form-img-2\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormSuccess\r\n","import React, {useState} from 'react';\r\nimport FormSignup from './FormSignup';\r\nimport FormSuccess from \"./FormSuccess\";\r\nimport \"./form.css\";\r\n\r\nconst Form = () => {\r\n    const [isSubmitted, setIsSubmitted] = useState(false)\r\n\r\n    function submitForm() {\r\n        setIsSubmitted(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <span className=\"close-btn\">x</span>\r\n            <div className=\"form-content-left\">\r\n                <img src=\"img/img-2.svg\" alt=\"spaceship\" className=\"form-img\" />\r\n            </div>\r\n\r\n            {/* logic to show which page to display if form is submitted or not */}\r\n            {!isSubmitted ? (\r\n                <FormSignup submitForm={submitForm} /> \r\n            ) : (\r\n                <FormSuccess />\r\n            )}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Form","import React from 'react';\nimport './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}